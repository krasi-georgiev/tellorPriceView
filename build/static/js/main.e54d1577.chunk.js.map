{"version":3,"sources":["utils/getWeb3.js","utils/psr.js","components/FeedTable/index.js","components/HomePage.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","a","window","ethereum","web3","Web3","enable","console","log","providers","HttpProvider","Column","StyledButton","styled","StyledTable","contractAddress","useState","priceLoading","setPriceLoading","totalTipsLoading","setTotalTipsLoading","tableData","setTableData","contract","setContract","tip","setTip","visible","setVisible","accounts","setAccounts","undefined","selectedID","setSelectedID","isMetamask","setIsMetaMask","useEffect","apiPromises","priceAPIPromises","tempTableData","currentProvider","isMetaMask","eth","getAccounts","Contract","TellorFund","abi","instance","PSRs","map","type","push","item","index","axios","get","then","res","all","values","_","tipObj","totalTip","priceObj","price","value","alert","error","web3Connect","dataSource","bordered","pagination","title","dataIndex","key","align","render","text","record","onClick","notification","message","description","showModal","onOk","e","methods","addTip","send","from","to","onCancel","style","marginBottom","placeholder","onChange","target","StyledHeader","label","StyledContainer","div","FeedTable","StyledHeaderTellor","span","StyledHeaderData","StyledLayout","App","Header","Content","Helmet","defaultTitle","name","content","HomePage","Boolean","location","hostname","match","MOUNT_NODE","document","getElementById","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e54d1577.chunk.js","sourcesContent":["\nimport Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise(async (resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    // window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const web3 = new Web3(new Web3.providers.HttpProvider('https://mainnet.infura.io/v3/8e141a98335246f2ab4fc9d231a13914'));\n        window.web3 = web3\n        // console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    // });\n  });\n\nexport default getWeb3;","export default [\n  \"ETH/USD - GDAX\",\n  \"BTC/USD - Binance\",\n  \"BNB/USD - Binance DEX\",\n  \"BTC/USD\",\n  \"ETH/BTC - Binance\",\n  \"BNB/BTC - Binance\",\n  \"BNB/ETH - Binance\",\n  \"ETH/USDT - Binance\",\n  \"LINK/BTC - Binance\",\n  \"ETC/ETH - Binance\",\n  \"ZEC/ETH - Binance\",\n  \"TRX/ETH - Binance\",\n  \"XRP/BTC - Binance\",\n  \"XMR/ETH - Binance\",\n  \"XLM/BTC - Binance\",\n  \"LTC/USDT - Binance\",\n  \"WAVES/BTC - Binance\",\n  \"REP/BTC - Binance\",\n  \"TUSDETH - Binance\",\n  \"EOS/USDT - Binance\",\n  \"IOTA/USDT- Binance\",\n  \"ETC/USDT - Binance\",\n  \"ETH/PAX - Binance\",\n  \"ETH/USDC - Binance\",\n  \"USDC/USDT - Binance\",\n  \"RCN/BTC - Binance\",\n  \"LINK/USDC - Binance\",\n  \"ZRX/BNB - Binance\",\n  \"ZEC/USDC - Binance\",\n  \"DASH/BNB - Binance\",\n  \"MATIC/USDT - Binance\",\n  \"BATUSDC - Binance\",\n  \"ALGO/USDT - Binance\",\n  \"ZRX/USDT - Binance\",\n  \"COS/USDT - Binance\",\n  \"BCH/USD - Kraken\",\n  \"REP/USD - CoinGecko\",\n  \"GNO/USD - Kraken\",\n  \"DAI/USD - Kraken\",\n  \"STEEM/BTC - Binance\",\n  \"LINK/USDT - Binance\",\n  \"WAN/BTC - Binance\",\n  \"GNT/ETH - Binance\",\n  \"BTC/USD - Bitfinex\",\n  \"BTC/USD - CoinGecko\",\n  \"ETH/USD - CoinGecko\",\n  \"LTC/USD - CoinGecko\",\n  \"Maker/USD - CoinGecko\",\n  \"EOS/USD - CoinGecko\",\n  \"TRB/USD - CoinGecko\",\n]","import React, {useEffect, useState, Fragment} from 'react'\nimport styled from 'styled-components'\nimport ReactLoading from 'react-loading'\nimport { Table, Button, Modal, Input, Alert, notification } from 'antd';\nimport axios from 'axios'\nimport _ from 'lodash'\nimport getWeb3 from 'utils/getWeb3'\nimport PSRs from 'utils/psr'\nimport TellorFund from 'utils/contracts/TellorFund'\nconst { Column } = Table\n\nconst StyledButton = styled(Button)`\n  color: #6CC7A3;\n  border-color: #6CC7A3;\n  font-size: 20px;\n  border-radius: 10px;\n  background: transparent;\n  &:hover, &:active, &:focus {\n    background-color: transparent;\n  }\n`\n\nconst StyledTable = styled(Table)`\n&&& {\n  table {\n    border-top: none;\n    border-left: none;\n    tr, td, th {\n      color: white;\n    }\n    td:first-child {\n      border-left: 1px solid white;\n    }\n    th {\n      border-right: none;\n      background: transparent;\n    }\n    tr:hover {\n      td {\n        background-color: #536350;\n      }\n    }\n  }\n}\n`\n\nconst contractAddress =\"0xFe41Cb708CD98C5B20423433309E55b53F79134a\"//\"0xc47d2339077F5aC117dD1B2953D5c54a0c0B89fa, 0x7d67E614d92b9D070839954dfd82ceEc7daFDAeD, 0xFe41Cb708CD98C5B20423433309E55b53F79134a\";\n\nexport default () => {\n  const [priceLoading, setPriceLoading] = useState(true)\n  const [totalTipsLoading, setTotalTipsLoading] = useState(true)\n  const [tableData, setTableData] = useState([])\n  const [contract, setContract] = useState(false)\n  const [tip, setTip] = useState(false)\n  const [visible, setVisible] = useState(false)\n  const [accounts, setAccounts] = useState([])\n  const [selectedID, setSelectedID] = useState(undefined)\n  const [isMetamask, setIsMetaMask] = useState(false)\n  useEffect(() => {\n    const apiPromises = []\n    const priceAPIPromises = []\n    let tempTableData = [...tableData]\n    async function web3Connect() {\n      try {\n        const web3 = await getWeb3();\n        setIsMetaMask(web3.currentProvider.isMetaMask)\n        const accounts = await web3.eth.getAccounts();\n        setAccounts(accounts)\n        const instance = await new web3.eth.Contract(TellorFund.abi, contractAddress);\n        setContract(instance)\n\n        PSRs.map(type => tempTableData.push({\n          type\n        }))\n        setTableData(tempTableData)\n        PSRs.map((item, index) => {\n          apiPromises.push(new Promise((resolve, reject) => {\n            axios.get(`http://api.tellorscan.com/requestinfo/${index+1}`).then(res => {\n              resolve(res)\n            })\n          }))\n          priceAPIPromises.push(new Promise((resolve, reject) => {\n            axios.get(`http://api.tellorscan.com/price/${index+1}`).then(res => {\n              resolve(res)\n            })\n          }))\n        })\n        Promise.all(apiPromises).then(function(values) {\n          const totalTips = [..._.map(values, 'data')]\n          totalTips.map((tipObj, index) => tempTableData[index].totalTip = tipObj.totalTip)\n          setTableData(tempTableData)\n          setTotalTipsLoading(false)\n        })\n        Promise.all(priceAPIPromises).then(values => {\n          const prices = [..._.map(values, 'data')]\n          prices.map((priceObj, index) => {\n            tempTableData[index].price = priceObj.value\n          })\n          setTableData(tempTableData)\n          setPriceLoading(false)\n        })\n      } catch (e) {\n        alert(\n          `Failed to load web3, be sure to be connected to the right Metamask network and reload teh browser!`,\n        );\n        console.error(e);\n      }\n    }\n\n    web3Connect()\n\n  }, [])\n\n  const showModal = (index) => {\n    if (isMetamask) {\n      setSelectedID(index + 1)\n      setVisible(true)\n    } else {\n      notification['warning']({\n        message: 'Metamask not found',\n        description:\n          'Please intsall metamask on the browser!',\n      });\n    }\n  };\n\n  const handleOk = e => {\n      if(tip >= 0){\n        contract.methods.addTip(selectedID, tip).send({\n          from: accounts[0],\n          to: contractAddress,\n        }).then((res)=>{\n          console.log(\"response: \", res)\n        });\n        setVisible(false)\n      } else {\n\n      }\n  };\n\n  const handleCancel = e => {\n    console.log(e);\n    setVisible(false)\n  };\n\n  if (totalTipsLoading || priceLoading)\n    return <ReactLoading type=\"spin\" />\n  return (\n    <Fragment>\n      <StyledTable\n        dataSource={tableData}\n        bordered\n        pagination={false}\n      >\n        <Column title=\"Type\" dataIndex=\"type\" key=\"type\" />\n        <Column title=\"Last Update\" dataIndex=\"price\" key=\"price\" />\n        <Column title=\"Current Tip\" dataIndex=\"totalTip\" key=\"totalTip\" />\n        <Column\n          title=\"\"\n          key=\"action\"\n          align=\"right\"\n          render={(text, record, index) => (\n            <Fragment>\n              <StyledButton onClick={() => showModal(index)}>+</StyledButton>\n            </Fragment>\n          )}\n        />\n      </StyledTable>\n      <Modal\n        title=\"Input Tip\"\n        visible={visible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        {tip < 0 && <Alert message=\"Tip should be larger than 0\" type=\"error\" style={{marginBottom: 10}} />}\n        <Input placeholder=\"Basic usage\" onChange={e => setTip(e.target.value)} />\n      </Modal>\n    </Fragment>\n  )\n}","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport FeedTable from './FeedTable'\n\nconst StyledHeader = styled.label`\n  font-size: 36px;\n  color: white;\n`\n\nconst StyledContainer = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\n\nexport default () => {\n\n  return (\n    <StyledContainer>\n      <StyledHeader>Tellor Data Feed</StyledHeader>\n      <FeedTable />\n    </StyledContainer>\n  )\n}\n","import React, {Fragment} from 'react'\nimport { Helmet } from 'react-helmet'\nimport { Layout } from 'antd'\nimport styled from 'styled-components'\nimport { HomePage } from 'components'\n\nconst StyledHeaderTellor = styled.span`\n  color: white;\n  font-size: 36px;\n`\nconst StyledHeaderData = styled.span`\n  color: #53F1B6;\n  font-size: 36px;\n`\n\nconst StyledLayout = styled(Layout)`\n  height: 100%;\n`\n\nconst App = () => {\n  const { Header,  Content } = Layout;\n\n  return (\n    <Fragment>\n      <Helmet defaultTitle=\"Tellor\">\n        <meta name=\"description\" content=\"Travels project\" />\n      </Helmet>\n      <StyledLayout>\n        <Header>\n          <StyledHeaderTellor>tellor</StyledHeaderTellor>\n          <StyledHeaderData>data</StyledHeaderData>\n        </Header>\n        <Content>\n          <HomePage />\n        </Content>\n      </StyledLayout>\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './style/index.scss'\n\nimport Routes from 'containers/App'\n\nimport * as serviceWorker from './serviceWorker'\n\nconst MOUNT_NODE = document.getElementById('root')\nReactDOM.render(<Routes />,  MOUNT_NODE)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}